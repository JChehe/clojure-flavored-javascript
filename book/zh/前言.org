* 前言
** 最好在看本书之前

*** 能看懂JavaScript代码
这既不是一本介绍 Clojure 也不是介绍 JavaScript 的书，这是一本介绍如何用 JavaScript 函数式编程的书。其中一些函数式的思想和表现形式都借用了 Clojure，因此叫做 Clojure 风格的函数式 JavaScript，但是并不要求在读本书前会 Clojure[fn:1]，而只需要能阅读 JavaScript 代码，那就足够了。 如果你会 Clojure，可以完全忽略我解释 Clojure 代码的段落，当然 JavaScript 的部分才是重点。

*** 你可能买错书了，如果你是

**** 想学 JavaScript

这不是一本 JavaScript 的教科书，这里只会介绍如何用 JavaScript 进行函数式编程，所以如果想要系统学习 JavaScript 的话，我猜看一看《JavaScript 语言精粹》已经足够了。另外如果读者的英文好的话，还有一本可以在线免费阅读的[[https://leanpub.com/javascriptallongesix/read][《JavaScript Allonge》]]。

**** 想学 Clojure

同样的，这也不是 Clojure 的教科书，这里只含有一些用于阐述函数式编程思想的 Clojure 代码。作为副作用，你确实可以学到一些 Clojure 编程的知识，但很可能是非常零碎不完整的知识。如果是想要系统的了解和学习 Clojure 的话，非常推荐《The Joy of Clojure》[fn:2]，另外，如果读者英文比较好，还有一本可以免费在线阅读的[[http://braveclojure.com][《CLOJURE for the BRAVE and TRUE》]] 也非常的不错。

**** 函数式编程的专家
如果你已经在日常工作或学习中使用 Scala，Clojure 或者 Haskell 等函数式语言编程的话，那么本书对你在函数式编程上的帮助不会太大。 *不过* ：这本书对解你从函数式语言迁移到 JavaScript 编程的不适应该是非常有效的，当然，这也正是本书的目的之一。

*** 准备环境
在开始阅读本书之前，如果你希望能运行书中的代码的话，可能需要一些环境的配置。而且书中的所有源码和运行方式都可以在本书的 Github 仓库[fn:15]中找到。当然如果你使用 emacs（同时还配置了 org babel 的话） 阅读本书的源码的话，对于大部分代码只需要光标放在在代码处按 =c-c c-c= 即可。

**** JavaScript

原生的 JavaScript 没有什么好准备的，可以通过 Node 或者 Firefox（推荐）的 Console 运行代码。当然第五章会有一些使用 sweet.js 写的 macro，则需要安装 sweet.js。

***** 安装 Node/iojs

1. 下载[[https://nodejs.org/][ nodejs]]

2. 如果使用 mac，可以直接用 brew 安装
#+BEGIN_SRC sh
  brew install node 
  # 或者
  brew install iojs
#+END_SRC

***** 安装 sweet.js
在安装完 node 之后命令行输入：
#+BEGIN_SRC sh
npm install -g sweet.js
#+END_SRC

**** Clojure

书中的 Clojure 代码大多都用来描述函数式编程的概念，当然如果想要运行书中的 Clojure 代码，首先需要安装 [[http://www.oracle.com/technetwork/java/javase/downloads/index.html][JVM 或者 JDK]]，至少需要1.6，推荐安装1.8。

***** 安装 leiningen
leiningen 是 clojure 的包管理工具，类似于 node 的 npm，ruby 的 bundle，python 的 pip。 另外 leinigen 还提供脚手架的功能。可以通过[[http://leiningen.org/][官网]]的脚本安装。 mac 用户可以简单的使用 =brew install leiningen= 安装。

安装完之后，就可以运行 =lein repl=  打开 repl，试试输入下列 clojure 代码，你将会立马看见结果。
#+BEGIN_SRC clojure
(+ 1 1)
;=> 2
#+END_SRC

***** 编辑器
如果更喜欢使用编辑器用来编辑更长一段的代码，我推荐非 emacs 用户使用 [[http://lighttable.com/][Light Table]], intellij 用户对使用 [[https://cursive-ide.com/][cursive]]。当然如果读者已经在使用 Emacs，那就更完美了，emacs [[https://github.com/clojure-emacs/cider][cider mode]] 是 Clojure 编程不错的选择。

** 本书中的代码
书中的所有源码和运行方式都可以在本书的 Github 仓库[fn:15]中找到，书中几乎所有的例子都以测试的形式完成。并且，本书的文本源代码也在该仓库中，并且可以通过 https://oyanglul.us/clojure-flavored-javascript 访问到在线版。

** 代码风格约定
本书的 JavaScript 代码都遵循 [[https://github.com/airbnb/javascript][Airbnb JavaScript Style Guide]][fn:3]  中的 ES5 和 React 的风格约定。
** TODO 本书的组织结构
*** 第一章
将介绍 JavaScript 的基本函数式背景，简要的介绍为什么要关心函数式编程，为什么说 Underscore 不够函数式，JavaScript 要作为完整的函数式语言还缺些什么？
*** 

** 本书使用的约定
本书使用以下字体排版约定。
*** /斜体/

表示新的术语。
*** =等宽字体=

代码清单，出现在段落之内则表示变量，函数名，关键字等。
*** *粗体*

重点概念。
*** _下划线_

需要填入的词，我可能已经帮大家填上了。
*** +横线+

可以忽略掉的词。

* Footnotes

[fn:3] https://github.com/airbnb/javascript

[fn:15] https://github.com/jcouyang/clojure-flavored-javascript/tree/source。

[fn:1] 就像计算机程序构造与解释中说的，lisp 语言基本没有语法，就像学习象棋的规则只用花很少的时间，而如何下好棋，才是学习的关键，也是乐趣所在。

[fn:2] 中文叫 Clojure 编程乐趣，但是只有第一版的，原书已经第二版了。 我刚好有幸翻译了作者 Michael Fogus 另一本《JavaScript 函数式编程》。
